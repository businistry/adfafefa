/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { NotaryServicePerformed } from "./NotaryServicePerformed";
import { NotaryServicePerformedCountArgs } from "./NotaryServicePerformedCountArgs";
import { NotaryServicePerformedFindManyArgs } from "./NotaryServicePerformedFindManyArgs";
import { NotaryServicePerformedFindUniqueArgs } from "./NotaryServicePerformedFindUniqueArgs";
import { CreateNotaryServicePerformedArgs } from "./CreateNotaryServicePerformedArgs";
import { UpdateNotaryServicePerformedArgs } from "./UpdateNotaryServicePerformedArgs";
import { DeleteNotaryServicePerformedArgs } from "./DeleteNotaryServicePerformedArgs";
import { Appointment } from "../../appointment/base/Appointment";
import { NotaryServicePerformedService } from "../notaryServicePerformed.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => NotaryServicePerformed)
export class NotaryServicePerformedResolverBase {
  constructor(
    protected readonly service: NotaryServicePerformedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "NotaryServicePerformed",
    action: "read",
    possession: "any",
  })
  async _notaryServicePerformedsMeta(
    @graphql.Args() args: NotaryServicePerformedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [NotaryServicePerformed])
  @nestAccessControl.UseRoles({
    resource: "NotaryServicePerformed",
    action: "read",
    possession: "any",
  })
  async notaryServicePerformeds(
    @graphql.Args() args: NotaryServicePerformedFindManyArgs
  ): Promise<NotaryServicePerformed[]> {
    return this.service.notaryServicePerformeds(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => NotaryServicePerformed, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "NotaryServicePerformed",
    action: "read",
    possession: "own",
  })
  async notaryServicePerformed(
    @graphql.Args() args: NotaryServicePerformedFindUniqueArgs
  ): Promise<NotaryServicePerformed | null> {
    const result = await this.service.notaryServicePerformed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NotaryServicePerformed)
  @nestAccessControl.UseRoles({
    resource: "NotaryServicePerformed",
    action: "create",
    possession: "any",
  })
  async createNotaryServicePerformed(
    @graphql.Args() args: CreateNotaryServicePerformedArgs
  ): Promise<NotaryServicePerformed> {
    return await this.service.createNotaryServicePerformed({
      ...args,
      data: {
        ...args.data,

        appointment: args.data.appointment
          ? {
              connect: args.data.appointment,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NotaryServicePerformed)
  @nestAccessControl.UseRoles({
    resource: "NotaryServicePerformed",
    action: "update",
    possession: "any",
  })
  async updateNotaryServicePerformed(
    @graphql.Args() args: UpdateNotaryServicePerformedArgs
  ): Promise<NotaryServicePerformed | null> {
    try {
      return await this.service.updateNotaryServicePerformed({
        ...args,
        data: {
          ...args.data,

          appointment: args.data.appointment
            ? {
                connect: args.data.appointment,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NotaryServicePerformed)
  @nestAccessControl.UseRoles({
    resource: "NotaryServicePerformed",
    action: "delete",
    possession: "any",
  })
  async deleteNotaryServicePerformed(
    @graphql.Args() args: DeleteNotaryServicePerformedArgs
  ): Promise<NotaryServicePerformed | null> {
    try {
      return await this.service.deleteNotaryServicePerformed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Appointment, {
    nullable: true,
    name: "appointment",
  })
  @nestAccessControl.UseRoles({
    resource: "Appointment",
    action: "read",
    possession: "any",
  })
  async getAppointment(
    @graphql.Parent() parent: NotaryServicePerformed
  ): Promise<Appointment | null> {
    const result = await this.service.getAppointment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
