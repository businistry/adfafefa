/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  NotaryServicePerformed as PrismaNotaryServicePerformed,
  Appointment as PrismaAppointment,
} from "@prisma/client";

export class NotaryServicePerformedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NotaryServicePerformedCountArgs, "select">
  ): Promise<number> {
    return this.prisma.notaryServicePerformed.count(args);
  }

  async notaryServicePerformeds<
    T extends Prisma.NotaryServicePerformedFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NotaryServicePerformedFindManyArgs>
  ): Promise<PrismaNotaryServicePerformed[]> {
    return this.prisma.notaryServicePerformed.findMany<Prisma.NotaryServicePerformedFindManyArgs>(
      args
    );
  }
  async notaryServicePerformed<
    T extends Prisma.NotaryServicePerformedFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NotaryServicePerformedFindUniqueArgs>
  ): Promise<PrismaNotaryServicePerformed | null> {
    return this.prisma.notaryServicePerformed.findUnique(args);
  }
  async createNotaryServicePerformed<
    T extends Prisma.NotaryServicePerformedCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NotaryServicePerformedCreateArgs>
  ): Promise<PrismaNotaryServicePerformed> {
    return this.prisma.notaryServicePerformed.create<T>(args);
  }
  async updateNotaryServicePerformed<
    T extends Prisma.NotaryServicePerformedUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NotaryServicePerformedUpdateArgs>
  ): Promise<PrismaNotaryServicePerformed> {
    return this.prisma.notaryServicePerformed.update<T>(args);
  }
  async deleteNotaryServicePerformed<
    T extends Prisma.NotaryServicePerformedDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NotaryServicePerformedDeleteArgs>
  ): Promise<PrismaNotaryServicePerformed> {
    return this.prisma.notaryServicePerformed.delete(args);
  }

  async getAppointment(parentId: string): Promise<PrismaAppointment | null> {
    return this.prisma.notaryServicePerformed
      .findUnique({
        where: { id: parentId },
      })
      .appointment();
  }
}
